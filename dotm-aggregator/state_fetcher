#!/bin/bash


# This is a temporary hack to provide the "period state fetcher2
# functionality. As Bash is not the best choice for data transformations
# it should be reimplemented in Python using a real Redis binding

NETCAT="nc"
REDIS_CLI="redis-cli -n 0 -h localhost -p 6379"

# egrep expressions, filtering common ports
LISTEN_FILTER="53|22|5666|4949|4848|25|631"		
ESTABLISHED_FILTER="${LISTEN_FILTER}"

if ! $REDIS_CLI info >/dev/null; then
	echo "ERROR: Cannot run '$REDIS_CLI'! Is it installed?" >&2
	exit 1
fi

if ! $NETCAT -h 2>/dev/null; then
	echo "ERROR: Cannot run '$NETCAT'! Is it installed?" >&2
	exit 1
fi

if [ "$CLIENTS" == "" ]; then
	echo "ERROR: Could not determine list of client nodes!" >&2
	exit 1
fi

CLIENTS=$($REDIS_CLI lrange dotm::nodes 0 -1)
for c in $CLIENTS;
do
	echo "Fetching from '$c'..."
	output=$(nc "$c" 4848)
	if [ $? -ne 0 ]; then
		echo "ERROR: Fetching status from '$c' failed!" >&2
		continue
	fi

	# Validate output
	# - check for node name
	# - check for connection list
	# - check for IP list
	if [[ ! "$output" =~ ^hostname= ]]; then
		echo "ERROR: Result from '$c' missing hostname! Ignoring it." >&1
		continue
	fi

	# There should be at least one established connection (that's us!)
	if [[ ! "$output" =~ ESTABLISHED ]]; then
		echo "ERROR: Result from '$c' missing connection listing! Ignoring it." >&1
		continue
	fi
	
	# There should be at least one interface listed
	if [[ ! "$output" =~ inet\  ]]; then
		echo "ERROR: Result from '$c' missing interface listing! Ignoring it." >&1
		continue
	fi
	
	# FIXME: Parse output and store into Redis

	echo "Services:"
	declare -A listen_ports
	while read proto recvq sendq localaddr remoteaddr state program rest; do
		echo "  -> listening on port ${localaddr##*:}	${program##*/}"
		listen_ports[${localaddr##*:}]=${program##*/}
	done < <(echo "$output" | grep "^tcp.*LISTEN" | egrep -v "$LISTEN_FILTER")

	echo "Connections:"
	while read proto recvq sendq localaddr remoteaddr state program rest; do
		if [[ "$localaddr" =~ ^127 && "$remoteaddr" =~ ^127 ]]; then
			echo "  -> ignoring local connection $localaddr -> $remoteaddr"
		elif [ "${listen_ports[${localaddr##*:}]}" == "" ]; then
			echo "  -> outgoing connection to $remoteaddr (by $program)"
		else
			echo "  -> incoming from $remoteaddr (to ${listen_ports[${localaddr##*:}]}"
		fi
	done < <(echo "$output" | grep ESTABL | egrep -v "$ESTABLISHED_FILTER")

	echo "Interfaces:"
	echo "$output" | grep "inet " | grep -v "host lo"
done

echo "Done."
